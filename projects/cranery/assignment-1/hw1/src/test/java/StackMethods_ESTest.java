/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 18 04:39:50 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StackMethods_ESTest extends StackMethods_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 53 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true
   * Goal 3. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 4. Branch StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true in context: StackMethods:push(I)V
   * Goal 5. push(I)V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. StackMethods.<init>(I)V: Line 9
   * Goal 7. StackMethods.<init>(I)V: Line 10
   * Goal 8. StackMethods.<init>(I)V: Line 11
   * Goal 9. StackMethods.<init>(I)V: Line 12
   * Goal 10. StackMethods.push(I)V: Line 15
   * Goal 11. StackMethods.push(I)V: Line 20
   * Goal 12. StackMethods.push(I)V: Line 21
   * Goal 13. [METHOD] StackMethods.<init>(I)V
   * Goal 14. [METHOD] StackMethods.push(I)V
   * Goal 15. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 16. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 17. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 18. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 19. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 20. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 22. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 23. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 24. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 25. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 26. Weak Mutation 10: StackMethods.push(I)V:15 - ReplaceVariable top -> size
   * Goal 27. Weak Mutation 11: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 12: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 29. Weak Mutation 13: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 30. Weak Mutation 14: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 15: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 32. Weak Mutation 16: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 33. Weak Mutation 17: StackMethods.push(I)V:15 - ReplaceConstant - 1 -> 0
   * Goal 34. Weak Mutation 18: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> +
   * Goal 35. Weak Mutation 19: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> %
   * Goal 36. Weak Mutation 20: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> *
   * Goal 37. Weak Mutation 21: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> /
   * Goal 38. Weak Mutation 24: StackMethods.push(I)V:15 - ReplaceComparisonOperator <= -> ==
   * Goal 39. Weak Mutation 26: StackMethods.push(I)V:20 - ReplaceVariable top -> size
   * Goal 40. Weak Mutation 27: StackMethods.push(I)V:20 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 28: StackMethods.push(I)V:20 - InsertUnaryOp +1
   * Goal 42. Weak Mutation 29: StackMethods.push(I)V:20 - InsertUnaryOp -1
   * Goal 43. Weak Mutation 30: StackMethods.push(I)V:20 - ReplaceConstant - 1 -> 0
   * Goal 44. Weak Mutation 32: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> -
   * Goal 45. Weak Mutation 33: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> *
   * Goal 46. Weak Mutation 34: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> /
   * Goal 47. Weak Mutation 35: StackMethods.push(I)V:21 - ReplaceVariable top -> size
   * Goal 48. Weak Mutation 36: StackMethods.push(I)V:21 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 37: StackMethods.push(I)V:21 - InsertUnaryOp +1
   * Goal 50. Weak Mutation 38: StackMethods.push(I)V:21 - InsertUnaryOp -1
   * Goal 51. Weak Mutation 40: StackMethods.push(I)V:21 - InsertUnaryOp Negation of value
   * Goal 52. Weak Mutation 41: StackMethods.push(I)V:21 - InsertUnaryOp IINC 1 value
   * Goal 53. Weak Mutation 42: StackMethods.push(I)V:21 - InsertUnaryOp IINC -1 value
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(3269);
      stackMethods0.stack = null;
      // Undeclared exception!
      try { 
        stackMethods0.push(3269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("StackMethods", e);
      }
  }

  //Test case number: 1
  /*
   * 52 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true
   * Goal 3. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 4. Branch StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true in context: StackMethods:push(I)V
   * Goal 5. push(I)V_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 6. StackMethods.<init>(I)V: Line 9
   * Goal 7. StackMethods.<init>(I)V: Line 10
   * Goal 8. StackMethods.<init>(I)V: Line 11
   * Goal 9. StackMethods.<init>(I)V: Line 12
   * Goal 10. StackMethods.push(I)V: Line 15
   * Goal 11. StackMethods.push(I)V: Line 20
   * Goal 12. StackMethods.push(I)V: Line 21
   * Goal 13. [METHOD] StackMethods.<init>(I)V
   * Goal 14. [METHOD] StackMethods.push(I)V
   * Goal 15. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 16. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 17. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 18. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 19. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 22. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 23. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 24. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 25. Weak Mutation 10: StackMethods.push(I)V:15 - ReplaceVariable top -> size
   * Goal 26. Weak Mutation 11: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 12: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 28. Weak Mutation 13: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 29. Weak Mutation 14: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 30. Weak Mutation 15: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 31. Weak Mutation 16: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 32. Weak Mutation 17: StackMethods.push(I)V:15 - ReplaceConstant - 1 -> 0
   * Goal 33. Weak Mutation 18: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> +
   * Goal 34. Weak Mutation 19: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> %
   * Goal 35. Weak Mutation 20: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> *
   * Goal 36. Weak Mutation 21: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> /
   * Goal 37. Weak Mutation 23: StackMethods.push(I)V:15 - ReplaceComparisonOperator <= -> <
   * Goal 38. Weak Mutation 26: StackMethods.push(I)V:20 - ReplaceVariable top -> size
   * Goal 39. Weak Mutation 27: StackMethods.push(I)V:20 - InsertUnaryOp Negation
   * Goal 40. Weak Mutation 28: StackMethods.push(I)V:20 - InsertUnaryOp +1
   * Goal 41. Weak Mutation 29: StackMethods.push(I)V:20 - InsertUnaryOp -1
   * Goal 42. Weak Mutation 30: StackMethods.push(I)V:20 - ReplaceConstant - 1 -> 0
   * Goal 43. Weak Mutation 32: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> -
   * Goal 44. Weak Mutation 33: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> *
   * Goal 45. Weak Mutation 34: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> /
   * Goal 46. Weak Mutation 36: StackMethods.push(I)V:21 - InsertUnaryOp Negation
   * Goal 47. Weak Mutation 37: StackMethods.push(I)V:21 - InsertUnaryOp +1
   * Goal 48. Weak Mutation 38: StackMethods.push(I)V:21 - InsertUnaryOp -1
   * Goal 49. Weak Mutation 39: StackMethods.push(I)V:21 - ReplaceVariable value -> size
   * Goal 50. Weak Mutation 40: StackMethods.push(I)V:21 - InsertUnaryOp Negation of value
   * Goal 51. Weak Mutation 41: StackMethods.push(I)V:21 - InsertUnaryOp IINC 1 value
   * Goal 52. Weak Mutation 42: StackMethods.push(I)V:21 - InsertUnaryOp IINC -1 value
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(0);
      // Undeclared exception!
      try { 
        stackMethods0.push((-657));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         assertThrownBy("StackMethods", e);
      }
  }

  //Test case number: 2
  /*
   * 13 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 3. <init>(I)V_java.lang.NegativeArraySizeException_IMPLICIT
   * Goal 4. StackMethods.<init>(I)V: Line 9
   * Goal 5. StackMethods.<init>(I)V: Line 10
   * Goal 6. [METHOD] StackMethods.<init>(I)V
   * Goal 7. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 8. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 9. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 10. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 11. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 12. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 13. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StackMethods stackMethods0 = null;
      try {
        stackMethods0 = new StackMethods((-1552));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("StackMethods", e);
      }
  }

  //Test case number: 3
  /*
   * 69 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true
   * Goal 3. StackMethods.isEmpty()Z: I5 Branch 3 IF_ICMPNE L34 - true
   * Goal 4. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 5. Branch StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true in context: StackMethods:push(I)V
   * Goal 6. Branch StackMethods.isEmpty()Z: I5 Branch 3 IF_ICMPNE L34 - true in context: StackMethods:isEmpty()Z
   * Goal 7. [Output]: StackMethods.isEmpty()Z:False
   * Goal 8. StackMethods.<init>(I)V: Line 9
   * Goal 9. StackMethods.<init>(I)V: Line 10
   * Goal 10. StackMethods.<init>(I)V: Line 11
   * Goal 11. StackMethods.<init>(I)V: Line 12
   * Goal 12. StackMethods.isEmpty()Z: Line 34
   * Goal 13. StackMethods.push(I)V: Line 15
   * Goal 14. StackMethods.push(I)V: Line 20
   * Goal 15. StackMethods.push(I)V: Line 21
   * Goal 16. StackMethods.push(I)V: Line 23
   * Goal 17. [METHOD] StackMethods.<init>(I)V
   * Goal 18. [METHOD] StackMethods.isEmpty()Z
   * Goal 19. [METHOD] StackMethods.push(I)V
   * Goal 20. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 21. [METHODNOEX] StackMethods.isEmpty()Z
   * Goal 22. [METHODNOEX] StackMethods.push(I)V
   * Goal 23. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 24. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 25. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 26. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 27. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 29. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 30. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 31. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 32. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 33. Weak Mutation 10: StackMethods.push(I)V:15 - ReplaceVariable top -> size
   * Goal 34. Weak Mutation 11: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 12: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 36. Weak Mutation 13: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 37. Weak Mutation 14: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 15: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 39. Weak Mutation 16: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 40. Weak Mutation 17: StackMethods.push(I)V:15 - ReplaceConstant - 1 -> 0
   * Goal 41. Weak Mutation 18: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> +
   * Goal 42. Weak Mutation 19: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> %
   * Goal 43. Weak Mutation 20: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> *
   * Goal 44. Weak Mutation 21: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> /
   * Goal 45. Weak Mutation 24: StackMethods.push(I)V:15 - ReplaceComparisonOperator <= -> ==
   * Goal 46. Weak Mutation 26: StackMethods.push(I)V:20 - ReplaceVariable top -> size
   * Goal 47. Weak Mutation 27: StackMethods.push(I)V:20 - InsertUnaryOp Negation
   * Goal 48. Weak Mutation 28: StackMethods.push(I)V:20 - InsertUnaryOp +1
   * Goal 49. Weak Mutation 29: StackMethods.push(I)V:20 - InsertUnaryOp -1
   * Goal 50. Weak Mutation 30: StackMethods.push(I)V:20 - ReplaceConstant - 1 -> 0
   * Goal 51. Weak Mutation 32: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> -
   * Goal 52. Weak Mutation 33: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> *
   * Goal 53. Weak Mutation 34: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> /
   * Goal 54. Weak Mutation 35: StackMethods.push(I)V:21 - ReplaceVariable top -> size
   * Goal 55. Weak Mutation 36: StackMethods.push(I)V:21 - InsertUnaryOp Negation
   * Goal 56. Weak Mutation 37: StackMethods.push(I)V:21 - InsertUnaryOp +1
   * Goal 57. Weak Mutation 38: StackMethods.push(I)V:21 - InsertUnaryOp -1
   * Goal 58. Weak Mutation 40: StackMethods.push(I)V:21 - InsertUnaryOp Negation of value
   * Goal 59. Weak Mutation 41: StackMethods.push(I)V:21 - InsertUnaryOp IINC 1 value
   * Goal 60. Weak Mutation 42: StackMethods.push(I)V:21 - InsertUnaryOp IINC -1 value
   * Goal 61. Weak Mutation 54: StackMethods.isEmpty()Z:34 - ReplaceVariable top -> size
   * Goal 62. Weak Mutation 55: StackMethods.isEmpty()Z:34 - InsertUnaryOp Negation
   * Goal 63. Weak Mutation 56: StackMethods.isEmpty()Z:34 - InsertUnaryOp +1
   * Goal 64. Weak Mutation 57: StackMethods.isEmpty()Z:34 - InsertUnaryOp -1
   * Goal 65. Weak Mutation 58: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 0
   * Goal 66. Weak Mutation 59: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 1
   * Goal 67. Weak Mutation 60: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> -2
   * Goal 68. Weak Mutation 62: StackMethods.isEmpty()Z:34 - ReplaceComparisonOperator != -> <
   * Goal 69. Weak Mutation 65: StackMethods.isEmpty()Z:34 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(2214);
      assertTrue(stackMethods0.isEmpty());
      
      stackMethods0.push(2214);
      boolean boolean0 = stackMethods0.isEmpty();
      assertFalse(boolean0);
  }

  //Test case number: 4
  /*
   * 33 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.isEmpty()Z: I5 Branch 3 IF_ICMPNE L34 - false
   * Goal 3. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 4. Branch StackMethods.isEmpty()Z: I5 Branch 3 IF_ICMPNE L34 - false in context: StackMethods:isEmpty()Z
   * Goal 5. [Output]: StackMethods.isEmpty()Z:True
   * Goal 6. StackMethods.<init>(I)V: Line 9
   * Goal 7. StackMethods.<init>(I)V: Line 10
   * Goal 8. StackMethods.<init>(I)V: Line 11
   * Goal 9. StackMethods.<init>(I)V: Line 12
   * Goal 10. StackMethods.isEmpty()Z: Line 34
   * Goal 11. [METHOD] StackMethods.<init>(I)V
   * Goal 12. [METHOD] StackMethods.isEmpty()Z
   * Goal 13. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 14. [METHODNOEX] StackMethods.isEmpty()Z
   * Goal 15. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 16. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 17. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 18. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 19. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 22. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 23. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 24. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 25. Weak Mutation 54: StackMethods.isEmpty()Z:34 - ReplaceVariable top -> size
   * Goal 26. Weak Mutation 55: StackMethods.isEmpty()Z:34 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 56: StackMethods.isEmpty()Z:34 - InsertUnaryOp +1
   * Goal 28. Weak Mutation 57: StackMethods.isEmpty()Z:34 - InsertUnaryOp -1
   * Goal 29. Weak Mutation 58: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 0
   * Goal 30. Weak Mutation 59: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 1
   * Goal 31. Weak Mutation 60: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> -2
   * Goal 32. Weak Mutation 61: StackMethods.isEmpty()Z:34 - ReplaceComparisonOperator != -> -1
   * Goal 33. Weak Mutation 64: StackMethods.isEmpty()Z:34 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(802);
      boolean boolean0 = stackMethods0.isEmpty();
      assertTrue(boolean0);
  }

  //Test case number: 5
  /*
   * 72 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true
   * Goal 3. StackMethods.display()V: I8 Branch 4 IF_ICMPLT L39 - true
   * Goal 4. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 5. Branch StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true in context: StackMethods:push(I)V
   * Goal 6. Branch StackMethods.display()V: I8 Branch 4 IF_ICMPLT L39 - true in context: StackMethods:display()V
   * Goal 7. StackMethods.<init>(I)V: Line 9
   * Goal 8. StackMethods.<init>(I)V: Line 10
   * Goal 9. StackMethods.<init>(I)V: Line 11
   * Goal 10. StackMethods.<init>(I)V: Line 12
   * Goal 11. StackMethods.display()V: Line 39
   * Goal 12. StackMethods.display()V: Line 42
   * Goal 13. StackMethods.display()V: Line 43
   * Goal 14. StackMethods.push(I)V: Line 15
   * Goal 15. StackMethods.push(I)V: Line 20
   * Goal 16. StackMethods.push(I)V: Line 21
   * Goal 17. StackMethods.push(I)V: Line 23
   * Goal 18. [METHOD] StackMethods.<init>(I)V
   * Goal 19. [METHOD] StackMethods.display()V
   * Goal 20. [METHOD] StackMethods.push(I)V
   * Goal 21. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 22. [METHODNOEX] StackMethods.display()V
   * Goal 23. [METHODNOEX] StackMethods.push(I)V
   * Goal 24. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 25. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 26. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 27. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 28. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 30. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 31. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 32. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 33. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 34. Weak Mutation 10: StackMethods.push(I)V:15 - ReplaceVariable top -> size
   * Goal 35. Weak Mutation 11: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 12: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 37. Weak Mutation 13: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 38. Weak Mutation 14: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 15: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 40. Weak Mutation 16: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 41. Weak Mutation 17: StackMethods.push(I)V:15 - ReplaceConstant - 1 -> 0
   * Goal 42. Weak Mutation 18: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> +
   * Goal 43. Weak Mutation 19: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> %
   * Goal 44. Weak Mutation 20: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> *
   * Goal 45. Weak Mutation 21: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> /
   * Goal 46. Weak Mutation 24: StackMethods.push(I)V:15 - ReplaceComparisonOperator <= -> ==
   * Goal 47. Weak Mutation 26: StackMethods.push(I)V:20 - ReplaceVariable top -> size
   * Goal 48. Weak Mutation 27: StackMethods.push(I)V:20 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 28: StackMethods.push(I)V:20 - InsertUnaryOp +1
   * Goal 50. Weak Mutation 29: StackMethods.push(I)V:20 - InsertUnaryOp -1
   * Goal 51. Weak Mutation 30: StackMethods.push(I)V:20 - ReplaceConstant - 1 -> 0
   * Goal 52. Weak Mutation 31: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> %
   * Goal 53. Weak Mutation 32: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> -
   * Goal 54. Weak Mutation 33: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> *
   * Goal 55. Weak Mutation 34: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> /
   * Goal 56. Weak Mutation 35: StackMethods.push(I)V:21 - ReplaceVariable top -> size
   * Goal 57. Weak Mutation 36: StackMethods.push(I)V:21 - InsertUnaryOp Negation
   * Goal 58. Weak Mutation 37: StackMethods.push(I)V:21 - InsertUnaryOp +1
   * Goal 59. Weak Mutation 38: StackMethods.push(I)V:21 - InsertUnaryOp -1
   * Goal 60. Weak Mutation 40: StackMethods.push(I)V:21 - InsertUnaryOp Negation of value
   * Goal 61. Weak Mutation 41: StackMethods.push(I)V:21 - InsertUnaryOp IINC 1 value
   * Goal 62. Weak Mutation 42: StackMethods.push(I)V:21 - InsertUnaryOp IINC -1 value
   * Goal 63. Weak Mutation 66: StackMethods.display()V:39 - ReplaceConstant - 0 -> 1
   * Goal 64. Weak Mutation 67: StackMethods.display()V:39 - ReplaceVariable i -> size
   * Goal 65. Weak Mutation 68: StackMethods.display()V:39 - InsertUnaryOp Negation of i
   * Goal 66. Weak Mutation 69: StackMethods.display()V:39 - InsertUnaryOp IINC 1 i
   * Goal 67. Weak Mutation 70: StackMethods.display()V:39 - InsertUnaryOp IINC -1 i
   * Goal 68. Weak Mutation 71: StackMethods.display()V:39 - ReplaceVariable top -> size
   * Goal 69. Weak Mutation 72: StackMethods.display()V:39 - InsertUnaryOp Negation
   * Goal 70. Weak Mutation 73: StackMethods.display()V:39 - InsertUnaryOp +1
   * Goal 71. Weak Mutation 74: StackMethods.display()V:39 - InsertUnaryOp -1
   * Goal 72. Weak Mutation 76: StackMethods.display()V:39 - ReplaceComparisonOperator < -> -2
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(1870);
      stackMethods0.push(1870);
      stackMethods0.push(1870);
      stackMethods0.display();
      assertFalse(stackMethods0.isEmpty());
  }

  //Test case number: 6
  /*
   * 82 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true
   * Goal 3. StackMethods.pop()V: I4 Branch 2 IFNE L26 - false
   * Goal 4. StackMethods.isEmpty()Z: I5 Branch 3 IF_ICMPNE L34 - true
   * Goal 5. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 6. Branch StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - true in context: StackMethods:push(I)V
   * Goal 7. Branch StackMethods.pop()V: I4 Branch 2 IFNE L26 - false in context: StackMethods:pop()V
   * Goal 8. StackMethods.<init>(I)V: Line 9
   * Goal 9. StackMethods.<init>(I)V: Line 10
   * Goal 10. StackMethods.<init>(I)V: Line 11
   * Goal 11. StackMethods.<init>(I)V: Line 12
   * Goal 12. StackMethods.isEmpty()Z: Line 34
   * Goal 13. StackMethods.pop()V: Line 26
   * Goal 14. StackMethods.pop()V: Line 27
   * Goal 15. StackMethods.pop()V: Line 31
   * Goal 16. StackMethods.push(I)V: Line 15
   * Goal 17. StackMethods.push(I)V: Line 20
   * Goal 18. StackMethods.push(I)V: Line 21
   * Goal 19. StackMethods.push(I)V: Line 23
   * Goal 20. [METHOD] StackMethods.<init>(I)V
   * Goal 21. [METHOD] StackMethods.pop()V
   * Goal 22. [METHOD] StackMethods.push(I)V
   * Goal 23. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 24. [METHODNOEX] StackMethods.pop()V
   * Goal 25. [METHODNOEX] StackMethods.push(I)V
   * Goal 26. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 27. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 28. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 29. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 30. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 32. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 33. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 34. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 35. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 36. Weak Mutation 10: StackMethods.push(I)V:15 - ReplaceVariable top -> size
   * Goal 37. Weak Mutation 11: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 38. Weak Mutation 12: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 39. Weak Mutation 13: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 40. Weak Mutation 14: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 41. Weak Mutation 15: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 42. Weak Mutation 16: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 43. Weak Mutation 17: StackMethods.push(I)V:15 - ReplaceConstant - 1 -> 0
   * Goal 44. Weak Mutation 18: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> +
   * Goal 45. Weak Mutation 19: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> %
   * Goal 46. Weak Mutation 20: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> *
   * Goal 47. Weak Mutation 21: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> /
   * Goal 48. Weak Mutation 24: StackMethods.push(I)V:15 - ReplaceComparisonOperator <= -> ==
   * Goal 49. Weak Mutation 26: StackMethods.push(I)V:20 - ReplaceVariable top -> size
   * Goal 50. Weak Mutation 27: StackMethods.push(I)V:20 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 28: StackMethods.push(I)V:20 - InsertUnaryOp +1
   * Goal 52. Weak Mutation 29: StackMethods.push(I)V:20 - InsertUnaryOp -1
   * Goal 53. Weak Mutation 30: StackMethods.push(I)V:20 - ReplaceConstant - 1 -> 0
   * Goal 54. Weak Mutation 32: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> -
   * Goal 55. Weak Mutation 33: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> *
   * Goal 56. Weak Mutation 34: StackMethods.push(I)V:20 - ReplaceArithmeticOperator + -> /
   * Goal 57. Weak Mutation 35: StackMethods.push(I)V:21 - ReplaceVariable top -> size
   * Goal 58. Weak Mutation 36: StackMethods.push(I)V:21 - InsertUnaryOp Negation
   * Goal 59. Weak Mutation 37: StackMethods.push(I)V:21 - InsertUnaryOp +1
   * Goal 60. Weak Mutation 38: StackMethods.push(I)V:21 - InsertUnaryOp -1
   * Goal 61. Weak Mutation 40: StackMethods.push(I)V:21 - InsertUnaryOp Negation of value
   * Goal 62. Weak Mutation 41: StackMethods.push(I)V:21 - InsertUnaryOp IINC 1 value
   * Goal 63. Weak Mutation 42: StackMethods.push(I)V:21 - InsertUnaryOp IINC -1 value
   * Goal 64. Weak Mutation 43: StackMethods.pop()V:26 - ReplaceComparisonOperator != -> ==
   * Goal 65. Weak Mutation 44: StackMethods.pop()V:27 - ReplaceVariable top -> size
   * Goal 66. Weak Mutation 45: StackMethods.pop()V:27 - InsertUnaryOp Negation
   * Goal 67. Weak Mutation 46: StackMethods.pop()V:27 - InsertUnaryOp +1
   * Goal 68. Weak Mutation 47: StackMethods.pop()V:27 - InsertUnaryOp -1
   * Goal 69. Weak Mutation 48: StackMethods.pop()V:27 - ReplaceConstant - 1 -> 0
   * Goal 70. Weak Mutation 49: StackMethods.pop()V:27 - ReplaceArithmeticOperator - -> +
   * Goal 71. Weak Mutation 50: StackMethods.pop()V:27 - ReplaceArithmeticOperator - -> %
   * Goal 72. Weak Mutation 51: StackMethods.pop()V:27 - ReplaceArithmeticOperator - -> *
   * Goal 73. Weak Mutation 52: StackMethods.pop()V:27 - ReplaceArithmeticOperator - -> /
   * Goal 74. Weak Mutation 54: StackMethods.isEmpty()Z:34 - ReplaceVariable top -> size
   * Goal 75. Weak Mutation 55: StackMethods.isEmpty()Z:34 - InsertUnaryOp Negation
   * Goal 76. Weak Mutation 56: StackMethods.isEmpty()Z:34 - InsertUnaryOp +1
   * Goal 77. Weak Mutation 57: StackMethods.isEmpty()Z:34 - InsertUnaryOp -1
   * Goal 78. Weak Mutation 58: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 0
   * Goal 79. Weak Mutation 59: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 1
   * Goal 80. Weak Mutation 60: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> -2
   * Goal 81. Weak Mutation 62: StackMethods.isEmpty()Z:34 - ReplaceComparisonOperator != -> <
   * Goal 82. Weak Mutation 65: StackMethods.isEmpty()Z:34 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(1870);
      stackMethods0.push(1870);
      assertFalse(stackMethods0.isEmpty());
      
      stackMethods0.pop();
      assertTrue(stackMethods0.isEmpty());
  }

  //Test case number: 7
  /*
   * 38 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.pop()V: I4 Branch 2 IFNE L26 - true
   * Goal 3. StackMethods.isEmpty()Z: I5 Branch 3 IF_ICMPNE L34 - false
   * Goal 4. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 5. Branch StackMethods.pop()V: I4 Branch 2 IFNE L26 - true in context: StackMethods:pop()V
   * Goal 6. StackMethods.<init>(I)V: Line 9
   * Goal 7. StackMethods.<init>(I)V: Line 10
   * Goal 8. StackMethods.<init>(I)V: Line 11
   * Goal 9. StackMethods.<init>(I)V: Line 12
   * Goal 10. StackMethods.isEmpty()Z: Line 34
   * Goal 11. StackMethods.pop()V: Line 26
   * Goal 12. StackMethods.pop()V: Line 29
   * Goal 13. StackMethods.pop()V: Line 31
   * Goal 14. [METHOD] StackMethods.<init>(I)V
   * Goal 15. [METHOD] StackMethods.pop()V
   * Goal 16. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 17. [METHODNOEX] StackMethods.pop()V
   * Goal 18. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 19. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 20. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 21. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 22. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 23. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 24. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 25. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 26. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 27. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 28. Weak Mutation 43: StackMethods.pop()V:26 - ReplaceComparisonOperator != -> ==
   * Goal 29. Weak Mutation 53: StackMethods.pop()V:29 - ReplaceConstant - Can't pop...stack is empty -> 
   * Goal 30. Weak Mutation 54: StackMethods.isEmpty()Z:34 - ReplaceVariable top -> size
   * Goal 31. Weak Mutation 55: StackMethods.isEmpty()Z:34 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 56: StackMethods.isEmpty()Z:34 - InsertUnaryOp +1
   * Goal 33. Weak Mutation 57: StackMethods.isEmpty()Z:34 - InsertUnaryOp -1
   * Goal 34. Weak Mutation 58: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 0
   * Goal 35. Weak Mutation 59: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> 1
   * Goal 36. Weak Mutation 60: StackMethods.isEmpty()Z:34 - ReplaceConstant - -1 -> -2
   * Goal 37. Weak Mutation 61: StackMethods.isEmpty()Z:34 - ReplaceComparisonOperator != -> -1
   * Goal 38. Weak Mutation 64: StackMethods.isEmpty()Z:34 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(11);
      stackMethods0.pop();
      assertTrue(stackMethods0.isEmpty());
  }

  //Test case number: 8
  /*
   * 39 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - false
   * Goal 3. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 4. Branch StackMethods.push(I)V: I8 Branch 1 IF_ICMPLE L15 - false in context: StackMethods:push(I)V
   * Goal 5. StackMethods.<init>(I)V: Line 9
   * Goal 6. StackMethods.<init>(I)V: Line 10
   * Goal 7. StackMethods.<init>(I)V: Line 11
   * Goal 8. StackMethods.<init>(I)V: Line 12
   * Goal 9. StackMethods.push(I)V: Line 15
   * Goal 10. StackMethods.push(I)V: Line 16
   * Goal 11. StackMethods.push(I)V: Line 23
   * Goal 12. [METHOD] StackMethods.<init>(I)V
   * Goal 13. [METHOD] StackMethods.push(I)V
   * Goal 14. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 15. [METHODNOEX] StackMethods.push(I)V
   * Goal 16. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 17. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 18. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 19. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 20. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 21. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 22. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 23. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 24. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 25. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 26. Weak Mutation 10: StackMethods.push(I)V:15 - ReplaceVariable top -> size
   * Goal 27. Weak Mutation 11: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 12: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 29. Weak Mutation 13: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 30. Weak Mutation 14: StackMethods.push(I)V:15 - InsertUnaryOp Negation
   * Goal 31. Weak Mutation 15: StackMethods.push(I)V:15 - InsertUnaryOp +1
   * Goal 32. Weak Mutation 16: StackMethods.push(I)V:15 - InsertUnaryOp -1
   * Goal 33. Weak Mutation 17: StackMethods.push(I)V:15 - ReplaceConstant - 1 -> 0
   * Goal 34. Weak Mutation 18: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> +
   * Goal 35. Weak Mutation 19: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> %
   * Goal 36. Weak Mutation 20: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> *
   * Goal 37. Weak Mutation 21: StackMethods.push(I)V:15 - ReplaceArithmeticOperator - -> /
   * Goal 38. Weak Mutation 22: StackMethods.push(I)V:15 - ReplaceComparisonOperator <= -> -1
   * Goal 39. Weak Mutation 25: StackMethods.push(I)V:16 - ReplaceConstant - Stack is full, can't push a value -> 
   */

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(11);
      stackMethods0.size = (-811);
      stackMethods0.push(11);
      assertTrue(stackMethods0.isEmpty());
  }

  //Test case number: 9
  /*
   * 38 covered goals:
   * Goal 1. StackMethods.<init>(I)V: root-Branch
   * Goal 2. StackMethods.display()V: I8 Branch 4 IF_ICMPLT L39 - false
   * Goal 3. Branch StackMethods.<init>(I)V: root-Branch in context: StackMethods:<init>(I)V
   * Goal 4. Branch StackMethods.display()V: I8 Branch 4 IF_ICMPLT L39 - false in context: StackMethods:display()V
   * Goal 5. display()V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. StackMethods.<init>(I)V: Line 9
   * Goal 7. StackMethods.<init>(I)V: Line 10
   * Goal 8. StackMethods.<init>(I)V: Line 11
   * Goal 9. StackMethods.<init>(I)V: Line 12
   * Goal 10. StackMethods.display()V: Line 39
   * Goal 11. StackMethods.display()V: Line 40
   * Goal 12. [METHOD] StackMethods.<init>(I)V
   * Goal 13. [METHOD] StackMethods.display()V
   * Goal 14. [METHODNOEX] StackMethods.<init>(I)V
   * Goal 15. Weak Mutation 0: StackMethods.<init>(I)V:9 - ReplaceVariable arraySize -> size
   * Goal 16. Weak Mutation 1: StackMethods.<init>(I)V:9 - InsertUnaryOp Negation of arraySize
   * Goal 17. Weak Mutation 2: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC 1 arraySize
   * Goal 18. Weak Mutation 3: StackMethods.<init>(I)V:9 - InsertUnaryOp IINC -1 arraySize
   * Goal 19. Weak Mutation 4: StackMethods.<init>(I)V:10 - InsertUnaryOp Negation
   * Goal 20. Weak Mutation 5: StackMethods.<init>(I)V:10 - InsertUnaryOp +1
   * Goal 21. Weak Mutation 6: StackMethods.<init>(I)V:10 - InsertUnaryOp -1
   * Goal 22. Weak Mutation 7: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 0
   * Goal 23. Weak Mutation 8: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> 1
   * Goal 24. Weak Mutation 9: StackMethods.<init>(I)V:11 - ReplaceConstant - -1 -> -2
   * Goal 25. Weak Mutation 66: StackMethods.display()V:39 - ReplaceConstant - 0 -> 1
   * Goal 26. Weak Mutation 67: StackMethods.display()V:39 - ReplaceVariable i -> size
   * Goal 27. Weak Mutation 68: StackMethods.display()V:39 - InsertUnaryOp Negation of i
   * Goal 28. Weak Mutation 69: StackMethods.display()V:39 - InsertUnaryOp IINC 1 i
   * Goal 29. Weak Mutation 70: StackMethods.display()V:39 - InsertUnaryOp IINC -1 i
   * Goal 30. Weak Mutation 71: StackMethods.display()V:39 - ReplaceVariable top -> size
   * Goal 31. Weak Mutation 72: StackMethods.display()V:39 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 73: StackMethods.display()V:39 - InsertUnaryOp +1
   * Goal 33. Weak Mutation 74: StackMethods.display()V:39 - InsertUnaryOp -1
   * Goal 34. Weak Mutation 75: StackMethods.display()V:39 - ReplaceComparisonOperator < -> !=
   * Goal 35. Weak Mutation 78: StackMethods.display()V:40 - ReplaceVariable i -> size
   * Goal 36. Weak Mutation 79: StackMethods.display()V:40 - InsertUnaryOp Negation of i
   * Goal 37. Weak Mutation 80: StackMethods.display()V:40 - InsertUnaryOp IINC 1 i
   * Goal 38. Weak Mutation 81: StackMethods.display()V:40 - InsertUnaryOp IINC -1 i
   */

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      StackMethods stackMethods0 = new StackMethods(2718);
      stackMethods0.stack = null;
      // Undeclared exception!
      try { 
        stackMethods0.display();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("StackMethods", e);
      }
  }
}
